/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   find_max_square.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: npiya-is <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/12/14 12:35:50 by npiya-is          #+#    #+#             */
/*   Updated: 2021/12/14 23:54:20 by tsomsa           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include <stdio.h>
#include "../headers/types.h"

t_square	able_to_fill(t_square square, t_board board);
t_square	set_max_square(s_square square, t_board board);
int			is_obs(t_board board, int i, int j);

t_board	find_max_square(t_board board)
{
	int	i;
	int	j;
	t_square		temp_sq;

	i = 0;
	j = 0;
	temp_sq.len = 0;
	board.sq.len = 0;
	while (i < board.height)
	{
		temp_sq.x0 = i;
		j = 0;	
		while (j < board.width)
		{
			temp_sq.y0 = j;
			temp_sq = able_to_fill(temp_sq, board);
			if (temp_sq.len > board.sq.len)
				board = set_max_square(temp_sq, board);
			j++;
		}
		i++;
	}
	return (board);
}

t_square	set_max_square(s_square square, t_board board)
{
	board.sq.len = square.len;
	board.sq.x0 = square.x0;
	board.sq.y0 = square.y0;
	return (square);
}

t_square	able_to_fill(t_square sq, t_board board)
{
	int	k;
	int	p;

	// printf("start point row : %d col : %d len : %d\n",row, col, square.len);
	if (board.data[sq.x0][sq.y0] == board.obs)
		return (square);
	// go right
	p = sq.x0;
	while (!is_obs(board, p, k) && k < board.width)
		k++;
	sq.len = k;
	p = sq.y0 + k;
	k = 0;
	// go down
	while (!is_obbs(board, k, p) && k < board.height)
		k++;
	// printf("move2 row row : %d, col : %d len : %d\n", row, col, square.len); 
	k = 1;
	while (k < square.len)
	{	
		if (board.data[i][j] == board.obs)
		{
			square.len--;
			return (able_to_fill(square, board));
		}
		j--;
		k++;
	}
	k = 1;
	// printf("move3 col row : %d, col : %d len : %d\n", i, j, square.len); 
	while (k < square.len)	
	{		
		if (board.data[i][j] == board.obs)
		{
			square.len--;
			return (able_to_fill(square, board));
		}
		i--;
		k++;
	}
//	if (check_in_square(table , square))
//		return (able_to_fill(square, table, board));
	// printf(" last move col row : %d, col : %d len : %d\n", row, col, square.len);
	return (square);
}

int	is_obs(t_board board, int i, int j)
{
	if (board.data[i][j] == board.obs)
		return (1);
	else
		return (0);
}

//int	chaeck_in_square(
/*
int	main(void)
{
	char	table[5][5];

	table[0][0] = 'o';
	table[0][1] = '.';
	table[0][2] = '.';
	table[0][3] = '.';
	table[0][4] = 'o';
	table[1][0] = '.';
	table[1][1] = '.';
	table[1][2] = '.';
	table[1][3] = 'o';
	table[1][4] = '.';
	table[2][0] = '.';
	table[2][1] = 'o';
	table[2][2] = '.';
	table[2][3] = '.';
	table[2][4] = '.';
	table[3][0] = '.';
	table[3][1] = '.';
	table[3][2] = '.';
	table[3][3] = '.';
	table[3][4] = '.';
	table[4][0] = '.';
	table[4][1] = '.';
	table[4][2] = 'o';
	table[4][3] = '.';
	table[4][4] = '.';

	t_board	board;
	board.width = 5;
	board.height = 5;
	board.obs = 'o';
	board.empty = '.';
	board = find_max_square(table, board);
	printf("square len : %d\n", board.sq.len);
	printf("square x : %d\n", board.sq.point.x);
	printf("square y : %d\n", board.sq.point.y);
	return (0);
}
*/
